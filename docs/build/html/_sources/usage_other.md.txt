# Using METISSE to evolve binaries

METISSE, by itself, is not capable of evolving stars in binary systems. However, it has been specifically designed to be integrated with binary evolution codes that can do so, enabling them to utilize current stellar data for binary evolution computations.

It can be seamlessly integrated with codes that currently utilize SSE fitting formulae [(Hurley et al. 2000)](https://ui.adsabs.harvard.edu/abs/2000MNRAS.315..543H/abstract) for single star evolution computations.
It has already been added to the binary evolution codes BSE [(Hurley et al. 2002)](https://ui.adsabs.harvard.edu/abs/2002MNRAS.329..897H/abstract) and COSMIC [(Breivik et al. 2020)](https://ui.adsabs.harvard.edu/abs/2020ApJ...898...71B/abstract).


## BSE 
 
To run METISSE with BSE and compute evolvution of a single binary, say a 2.5 M<sub>$_\odot$</sub> star with a 1 M<sub>$_\odot$</sub> companion, with initial orbital period of 100 days in a circular orbit for the evolution time of 13.7 gegayears  

1. Get the METISSE enabled version of BSE through its [github repository](https://github.com/poojanagrawal/BSE-METISSE).


``` console

$ git clone https://github.com/poojanagrawal/BSE-METISSE

```


2. Make sure use_SSE is set of false in the `bse.f` located inside the `src` folder .

3. Next, compile the code:

``` console

$ ./mk

```

4. When using BSE, METISSE specific inputs are read through the `METISSE_input_controls` inlist in the *evolve_metisse.in* file. All other inputs including the binary parameters as well as the values of mass, metallicity are read through the BSE input file `binary.in`. 

For the pre-packaged grid of stellar tracks available with METISSE, we supply the path to the `hydrogen` and the `helium` folders through 'tracks_dir' and 'tracks_dir_he' options of `METISSE_input_controls`.

```
&METISSE_input_controls


tracks_dir = '/Users/poojan/stellar_tracks/MESA/big_z/hydrogen'
            
tracks_dir_he = '/Users/poojan/stellar_tracks/MESA/big_z/helium'

/

```

5.  Finally, run BSE using:

``` console

$ ./bse_metisse

```

6. BSE will produce the following output.

``` console
      TIME      M1       M2   K1 K2        SEP    ECC  R1/ROL1 R2/ROL2  TYPE
     0.0000    2.500    1.000  1  1      137.607  0.00   0.028   0.022  INITIAL 
   567.8636    2.499    1.000  2  1      137.649  0.00   0.063   0.022  KW CHNGE
   574.5686    2.499    1.000  3  1      137.652  0.00   0.120   0.022  KW CHNGE
   581.1684    2.499    1.000  4  1      136.123  0.00   0.525   0.022  KW CHNGE
   768.8467    2.496    1.000  5  1      136.210  0.00   0.293   0.022  KW CHNGE
   780.5401    2.495    1.000  5  1      125.450  0.00   1.001   0.024  BEG RCHE
   780.5401    0.523    1.000  8  1       11.851  0.00   1.001   0.024  COMENV  
   780.5401    0.523    1.000  8  1       11.851  0.00   0.018   0.177  END RCHE
   781.1571    0.468    1.000 11  1       11.883  0.00   0.004   0.172  KW CHNGE
  9470.1367    0.468    1.000 11  2       14.083  0.00   0.003   0.208  KW CHNGE
 11192.3223    0.468    0.999 11  3       14.024  0.00   0.003   0.279  KW CHNGE
 11950.0928    0.468    0.999 11  3       11.966  0.00   0.004   1.000  BEG RCHE
 11950.0928    0.468    0.200 11 10        1.199  0.00   0.004   1.000  COMENV  
 11950.0928    0.468    0.200 11 10        1.199  0.00   0.027   0.058  END RCHE
 13700.0000    0.468    0.200 11 10        1.076  0.00   0.030   0.065  MAX TIME
```

For more detailed output, checkout the output file in the `output_binary` folder.


 <!-- `popbin.f`.  -->



## COSMIC 


To use METISSE with COSMIC: 

1. Get updated version of COSMIC


If you don't have COSMIC installed already you can fork and clone it from the [github repository](https://github.com/COSMIC-PopSynth/COSMIC/tree/develop).


``` console

$ git clone https://github.com/COSMIC-PopSynth/COSMIC

```

Load the cosmic environment following the instructions on [this page](https://cosmic-popsynth.github.io/COSMIC/install/index.html#) and cd into the COSMIC's directory.


2. Next checkout the METISSE-Integrate branch 


``` console

$ git checkout METISSE-integrate

```


and the METISSE submodule 

``` console

$ git submodule update --init --recursive

```


To compile them run: 


``` console

$ pip install .

```

3. Download the tracks and supply the path to hydrogen and helium folders with SSEDict.

``` ipython
SSEDict = {'stellar_engine': 'metisse', 
		   'path_to_tracks': path_to_tracks, 
		   'path_to_he_tracks':path_to_he_tracks 
		   }
```

::: {Note}
Fortran namelist `METISSE_input_controls` is not read when using COSMIC. `path_to_tracks` and `path_to_he_tracks` are used in place of the `tracks_dir`  and `tracks_dir_he` options of `METISSE_input_controls` to supply relevant paths. 

::: 


4. BSEDict and initbinary

5. compute the evolution




